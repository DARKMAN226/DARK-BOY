const { cmd } = require('../command');
const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

cmd({
    pattern: "removemembers",
    alias: ["kickall", "endgc", "endgroup"],
    desc: "Supprime tous les membres non-admins du groupe.",
    react: "üßπ",
    category: "group",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, groupMetadata, groupAdmins, isBotAdmins, senderNumber, reply, isGroup
}) => {
    try {
        if (!isGroup)
            return reply("‚ùå Cette commande ne peut √™tre utilis√©e que dans un groupe.");

        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner)
            return reply("üîí Seul le propri√©taire du bot peut utiliser cette commande.");

        if (!isBotAdmins)
            return reply("üîë Je dois √™tre administrateur pour pouvoir supprimer des membres.");

        const allParticipants = groupMetadata.participants;
        const nonAdminParticipants = allParticipants.filter(member => !groupAdmins.includes(member.id));

        if (nonAdminParticipants.length === 0)
            return reply("‚úÖ Aucun membre √† supprimer : tous sont des administrateurs.");

        reply(`üßπ D√©but de la suppression de *${nonAdminParticipants.length}* membre(s) non-admin...`);

        for (let participant of nonAdminParticipants) {
            try {
                await conn.groupParticipantsUpdate(from, [participant.id], "remove");
                await sleep(2000); // Attente de 2 secondes entre chaque suppression
            } catch (e) {
                console.error(`‚ùå √âchec de la suppression de ${participant.id} :`, e);
            }
        }

        reply("‚úÖ Tous les membres non-admins ont √©t√© supprim√©s du groupe.");

    } catch (e) {
        console.error("Erreur lors de la suppression :", e);
        reply("‚ùå Une erreur est survenue pendant la suppression. Veuillez r√©essayer.");
    }
});


// supprimer uniquement les admins

cmd({
    pattern: "removeadmins",
    alias: ["kickadmins", "kickall3", "deladmins"],
    desc: "Supprime tous les membres admins du groupe, sauf le bot et le propri√©taire du bot.",
    react: "üéâ",
    category: "groupe",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, isGroup, senderNumber, groupMetadata, groupAdmins, isBotAdmins, reply
}) => {
    try {
        // V√©rifie si la commande est utilis√©e dans un groupe
        if (!isGroup) {
            return reply("‚ùå Cette commande ne peut √™tre utilis√©e que dans les groupes.");
        }

        // R√©cup√®re le num√©ro du propri√©taire du bot dynamiquement
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) {
            return reply("‚ùå Seul le propri√©taire du bot peut utiliser cette commande.");
        }

        if (!isBotAdmins) {
            return reply("‚ùå Je dois √™tre admin pour ex√©cuter cette commande.");
        }

        const allParticipants = groupMetadata.participants;
        // Filtre les membres admins √† supprimer sauf le bot et le propri√©taire
        const adminParticipants = allParticipants.filter(member => 
            groupAdmins.includes(member.id) && 
            member.id !== conn.user.id && 
            member.id !== `${botOwner}@s.whatsapp.net`
        );

        if (adminParticipants.length === 0) {
            return reply("‚ÑπÔ∏è Il n'y a pas d'admins √† supprimer.");
        }

        reply(`‚ö†Ô∏è D√©but de la suppression de ${adminParticipants.length} admins, sauf le bot et le propri√©taire...`);

        for (let participant of adminParticipants) {
            try {
                await conn.groupParticipantsUpdate(from, [participant.id], "remove");
                await sleep(2000); // Pause de 2 secondes entre chaque suppression
            } catch (e) {
                console.error(`√âchec de la suppression de ${participant.id} :`, e);
            }
        }

        reply("‚úÖ Tous les admins (sauf le bot et le propri√©taire) ont √©t√© supprim√©s avec succ√®s.");
    } catch (e) {
        console.error("Erreur lors de la suppression des admins :", e);
        reply("‚ùå Une erreur est survenue lors de la suppression des admins. Veuillez r√©essayer.");
    }
});

// supprimer tous les admins et membres

cmd({
    pattern: "removeall2",
    alias: ["kickall2", "endgc2", "endgroup2"],
    desc: "Supprime tous les membres et admins du groupe, sauf le bot et le propri√©taire du bot.",
    react: "üéâ",
    category: "groupe",
    filename: __filename,
}, 
async (conn, mek, m, {
    from, isGroup, senderNumber, groupMetadata, isBotAdmins, reply
}) => {
    try {
        // V√©rifie si la commande est utilis√©e dans un groupe
        if (!isGroup) {
            return reply("‚ùå Cette commande ne peut √™tre utilis√©e que dans les groupes.");
        }

        // R√©cup√®re dynamiquement le num√©ro du propri√©taire du bot
        const botOwner = conn.user.id.split(":")[0];
        if (senderNumber !== botOwner) {
            return reply("‚ùå Seul le propri√©taire du bot peut utiliser cette commande.");
        }

        if (!isBotAdmins) {
            return reply("‚ùå Je dois √™tre admin pour ex√©cuter cette commande.");
        }

        const allParticipants = groupMetadata.participants;

        if (allParticipants.length === 0) {
            return reply("‚ÑπÔ∏è Le groupe ne contient aucun membre √† supprimer.");
        }

        // Exclut le bot et le propri√©taire du bot de la liste
        const participantsToRemove = allParticipants.filter(
            participant => participant.id !== conn.user.id && participant.id !== `${botOwner}@s.whatsapp.net`
        );

        if (participantsToRemove.length === 0) {
            return reply("‚ÑπÔ∏è Aucun membre √† supprimer apr√®s exclusion du bot et du propri√©taire.");
        }

        reply(`‚ö†Ô∏è D√©but de la suppression de ${participantsToRemove.length} membres, sauf le bot et le propri√©taire...`);

        for (let participant of participantsToRemove) {
            try {
                await conn.groupParticipantsUpdate(from, [participant.id], "remove");
                await sleep(2000); // Pause de 2 secondes entre chaque suppression
            } catch (e) {
                console.error(`√âchec de la suppression de ${participant.id} :`, e);
            }
        }

        reply("‚úÖ Tous les membres (sauf le bot et le propri√©taire) ont √©t√© supprim√©s avec succ√®s du groupe.");
    } catch (e) {
        console.error("Erreur lors de la suppression des membres :", e);
        reply("‚ùå Une erreur est survenue lors de la suppression des membres. Veuillez r√©essayer.");
    }
});
